// <auto-generated />
using System;
using CRMTest.CRMContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRMTest.Migrations
{
    [DbContext(typeof(crmContext))]
    [Migration("20240326073119_initial1")]
    partial class initial1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CRMTest.Model.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CampaignTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("client_id")
                        .HasColumnType("int");

                    b.Property<int>("created_by")
                        .HasColumnType("int");

                    b.Property<int>("source_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("client_id");

                    b.HasIndex("created_by");

                    b.HasIndex("source_id");

                    b.ToTable("CampaignTb");
                });

            modelBuilder.Entity("CRMTest.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Accountinfo_id")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("addressInfo_id")
                        .HasColumnType("int");

                    b.Property<int>("billingInfo_id")
                        .HasColumnType("int");

                    b.Property<int>("subscription_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Accountinfo_id")
                        .IsUnique();

                    b.HasIndex("addressInfo_id")
                        .IsUnique();

                    b.HasIndex("billingInfo_id")
                        .IsUnique();

                    b.HasIndex("subscription_id")
                        .IsUnique();

                    b.ToTable("ClientTb");
                });

            modelBuilder.Entity("CRMTest.Model.ClientAccountInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyWebSite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GST_IN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClientAccountInfo");
                });

            modelBuilder.Entity("CRMTest.Model.ClientAddressInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClientAddressInfo");
                });

            modelBuilder.Entity("CRMTest.Model.ClientBillingInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClientBillingInfo");
                });

            modelBuilder.Entity("CRMTest.Model.ClientCustomers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("agent_id")
                        .HasColumnType("int");

                    b.Property<int>("campaign_id")
                        .HasColumnType("int");

                    b.Property<int>("client_id")
                        .HasColumnType("int");

                    b.Property<int>("source_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("agent_id");

                    b.HasIndex("campaign_id");

                    b.HasIndex("client_id");

                    b.HasIndex("source_id");

                    b.ToTable("ClientCustomersTb");
                });

            modelBuilder.Entity("CRMTest.Model.ClientFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("client_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("client_id");

                    b.ToTable("ClientFeedbackTb");
                });

            modelBuilder.Entity("CRMTest.Model.ClientSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidUpTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("current_subscription")
                        .HasColumnType("int");

                    b.Property<int>("status_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("current_subscription");

                    b.HasIndex("status_id");

                    b.ToTable("ClientSubscription");
                });

            modelBuilder.Entity("CRMTest.Model.CrmAdmins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CrmAdminsTb");
                });

            modelBuilder.Entity("CRMTest.Model.CustomFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomFieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultFieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("clientId")
                        .HasColumnType("int");

                    b.Property<int>("client_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("clientId");

                    b.ToTable("CustomFields");
                });

            modelBuilder.Entity("CRMTest.Model.LeadCallHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CallDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecordedFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("agent_id")
                        .HasColumnType("int");

                    b.Property<int>("lead_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("agent_id");

                    b.HasIndex("lead_id");

                    b.ToTable("LeadCallHistoryTb");
                });

            modelBuilder.Entity("CRMTest.Model.LeadCampaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("campaign_id")
                        .HasColumnType("int");

                    b.Property<int>("lead_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("campaign_id");

                    b.HasIndex("lead_id")
                        .IsUnique();

                    b.ToTable("LeadCampaign");
                });

            modelBuilder.Entity("CRMTest.Model.LeadDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("lead_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("lead_id");

                    b.ToTable("LeadDocuments");
                });

            modelBuilder.Entity("CRMTest.Model.LeadFollowUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FollowUpNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextFollowUp")
                        .HasColumnType("datetime2");

                    b.Property<int>("lead_id")
                        .HasColumnType("int");

                    b.Property<int>("updated_by")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("lead_id")
                        .IsUnique();

                    b.HasIndex("updated_by");

                    b.ToTable("LeadFollowUp");
                });

            modelBuilder.Entity("CRMTest.Model.LeadQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("client_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("client_id");

                    b.ToTable("LeadQualificationTb");
                });

            modelBuilder.Entity("CRMTest.Model.LeadSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("lead_id")
                        .HasColumnType("int");

                    b.Property<int>("source_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("lead_id")
                        .IsUnique();

                    b.HasIndex("source_id");

                    b.ToTable("LeadSource");
                });

            modelBuilder.Entity("CRMTest.Model.LeadStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LeadStatusTb");
                });

            modelBuilder.Entity("CRMTest.Model.Leads", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("ChanceOfWon")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FollowUpNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NextFollowUp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("client_id")
                        .HasColumnType("int");

                    b.Property<int>("created_by")
                        .HasColumnType("int");

                    b.Property<int>("qualification_id")
                        .HasColumnType("int");

                    b.Property<int>("source_id")
                        .HasColumnType("int");

                    b.Property<int>("status_id")
                        .HasColumnType("int");

                    b.Property<int>("updated_by")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("client_id");

                    b.HasIndex("qualification_id");

                    b.HasIndex("source_id");

                    b.HasIndex("status_id");

                    b.HasIndex("updated_by");

                    b.ToTable("LeadsTb");
                });

            modelBuilder.Entity("CRMTest.Model.LeadsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("lead_id")
                        .HasColumnType("int");

                    b.Property<int>("updated_by")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("lead_id");

                    b.HasIndex("updated_by");

                    b.ToTable("LeadsHistoryTb");
                });

            modelBuilder.Entity("CRMTest.Model.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CRMTest.Model.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanAdd")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanView")
                        .HasColumnType("bit");

                    b.Property<int>("permission_id")
                        .HasColumnType("int");

                    b.Property<int>("role_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("permission_id")
                        .IsUnique();

                    b.HasIndex("role_id")
                        .IsUnique();

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("CRMTest.Model.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("client_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("client_id");

                    b.ToTable("LeadSourceTb");
                });

            modelBuilder.Entity("CRMTest.Model.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Validity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("CRMTest.Model.SubscriptionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("StatusTitle")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionStatus");
                });

            modelBuilder.Entity("CRMTest.Model.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("created_by")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("created_by");

                    b.ToTable("TasksTb");
                });

            modelBuilder.Entity("CRMTest.Model.TasksHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("staffId")
                        .HasColumnType("int");

                    b.Property<int>("stafftask_id")
                        .HasColumnType("int");

                    b.Property<int>("updated_by")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("staffId");

                    b.HasIndex("stafftask_id");

                    b.ToTable("TasksHistoryTb");
                });

            modelBuilder.Entity("CRMTest.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("client_id")
                        .HasColumnType("int");

                    b.Property<int>("role_id")
                        .HasColumnType("int");

                    b.Property<int>("userinfo_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("client_id");

                    b.HasIndex("role_id");

                    b.HasIndex("userinfo_id")
                        .IsUnique();

                    b.ToTable("StaffsTb");
                });

            modelBuilder.Entity("CRMTest.Model.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("CRMTest.Model.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("client_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("client_id");

                    b.ToTable("StaffRoleTb");
                });

            modelBuilder.Entity("CRMTest.Model.UserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("status_id")
                        .HasColumnType("int");

                    b.Property<int>("task_id")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("status_id");

                    b.HasIndex("task_id");

                    b.HasIndex("user_id");

                    b.ToTable("StaffTaskTb");
                });

            modelBuilder.Entity("CRMTest.Model.UserTaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StaffTaskStatusTb");
                });

            modelBuilder.Entity("CRMTest.Model.Campaign", b =>
                {
                    b.HasOne("CRMTest.Model.Client", "clients")
                        .WithMany("campaigns")
                        .HasForeignKey("client_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.User", "user")
                        .WithMany("campaigns")
                        .HasForeignKey("created_by")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.Source", "leadSource")
                        .WithMany("campaigns")
                        .HasForeignKey("source_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("clients");

                    b.Navigation("leadSource");

                    b.Navigation("user");
                });

            modelBuilder.Entity("CRMTest.Model.Client", b =>
                {
                    b.HasOne("CRMTest.Model.ClientAccountInfo", "AccountInfo")
                        .WithOne("client")
                        .HasForeignKey("CRMTest.Model.Client", "Accountinfo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.ClientAddressInfo", "AddressInfo")
                        .WithOne("client")
                        .HasForeignKey("CRMTest.Model.Client", "addressInfo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.ClientBillingInfo", "billingInfo")
                        .WithOne("client")
                        .HasForeignKey("CRMTest.Model.Client", "billingInfo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.ClientSubscription", "clientSubscription")
                        .WithOne("client")
                        .HasForeignKey("CRMTest.Model.Client", "subscription_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountInfo");

                    b.Navigation("AddressInfo");

                    b.Navigation("billingInfo");

                    b.Navigation("clientSubscription");
                });

            modelBuilder.Entity("CRMTest.Model.ClientCustomers", b =>
                {
                    b.HasOne("CRMTest.Model.User", "user")
                        .WithMany("clientCustomers")
                        .HasForeignKey("agent_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.Campaign", "campaign")
                        .WithMany("clientCustomers")
                        .HasForeignKey("campaign_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.Client", "client")
                        .WithMany("clientCustomers")
                        .HasForeignKey("client_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.Source", "sources")
                        .WithMany("clientCustomers")
                        .HasForeignKey("source_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("campaign");

                    b.Navigation("client");

                    b.Navigation("sources");

                    b.Navigation("user");
                });

            modelBuilder.Entity("CRMTest.Model.ClientFeedback", b =>
                {
                    b.HasOne("CRMTest.Model.Client", "client")
                        .WithMany("clientFeedbacks")
                        .HasForeignKey("client_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");
                });

            modelBuilder.Entity("CRMTest.Model.ClientSubscription", b =>
                {
                    b.HasOne("CRMTest.Model.Subscription", "subscription")
                        .WithMany("clientSubscriptions")
                        .HasForeignKey("current_subscription")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.SubscriptionStatus", "status")
                        .WithMany("clientSubscriptions")
                        .HasForeignKey("status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("status");

                    b.Navigation("subscription");
                });

            modelBuilder.Entity("CRMTest.Model.CustomFields", b =>
                {
                    b.HasOne("CRMTest.Model.Client", "client")
                        .WithMany("customFields")
                        .HasForeignKey("clientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");
                });

            modelBuilder.Entity("CRMTest.Model.LeadCallHistory", b =>
                {
                    b.HasOne("CRMTest.Model.User", "user")
                        .WithMany("leadCallHistories")
                        .HasForeignKey("agent_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.Leads", "leads")
                        .WithMany("leadCallHistories")
                        .HasForeignKey("lead_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("leads");

                    b.Navigation("user");
                });

            modelBuilder.Entity("CRMTest.Model.LeadCampaign", b =>
                {
                    b.HasOne("CRMTest.Model.Campaign", "campaign")
                        .WithMany("leadCampaigns")
                        .HasForeignKey("campaign_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.Leads", "leads")
                        .WithOne("lead_campaign")
                        .HasForeignKey("CRMTest.Model.LeadCampaign", "lead_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("campaign");

                    b.Navigation("leads");
                });

            modelBuilder.Entity("CRMTest.Model.LeadDocuments", b =>
                {
                    b.HasOne("CRMTest.Model.Leads", "leads")
                        .WithMany("leadDocuments")
                        .HasForeignKey("lead_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("leads");
                });

            modelBuilder.Entity("CRMTest.Model.LeadFollowUp", b =>
                {
                    b.HasOne("CRMTest.Model.Leads", "lead")
                        .WithOne("leadFollowUp")
                        .HasForeignKey("CRMTest.Model.LeadFollowUp", "lead_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.User", "user")
                        .WithMany("leadFollowUps")
                        .HasForeignKey("updated_by")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("lead");

                    b.Navigation("user");
                });

            modelBuilder.Entity("CRMTest.Model.LeadQualification", b =>
                {
                    b.HasOne("CRMTest.Model.Client", "client")
                        .WithMany("leadQualifications")
                        .HasForeignKey("client_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");
                });

            modelBuilder.Entity("CRMTest.Model.LeadSource", b =>
                {
                    b.HasOne("CRMTest.Model.Leads", "leads")
                        .WithOne("leadSource")
                        .HasForeignKey("CRMTest.Model.LeadSource", "lead_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.Source", "source")
                        .WithMany("leadSources")
                        .HasForeignKey("source_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("leads");

                    b.Navigation("source");
                });

            modelBuilder.Entity("CRMTest.Model.Leads", b =>
                {
                    b.HasOne("CRMTest.Model.Campaign", null)
                        .WithMany("leads")
                        .HasForeignKey("CampaignId");

                    b.HasOne("CRMTest.Model.Client", "client")
                        .WithMany("leads")
                        .HasForeignKey("client_id")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.LeadQualification", "leadQualification")
                        .WithMany("leads")
                        .HasForeignKey("qualification_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.Source", "sources")
                        .WithMany("leads")
                        .HasForeignKey("source_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.LeadStatus", "status")
                        .WithMany("leads")
                        .HasForeignKey("status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.User", "user")
                        .WithMany("leads")
                        .HasForeignKey("updated_by")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("client");

                    b.Navigation("leadQualification");

                    b.Navigation("sources");

                    b.Navigation("status");

                    b.Navigation("user");
                });

            modelBuilder.Entity("CRMTest.Model.LeadsHistory", b =>
                {
                    b.HasOne("CRMTest.Model.Leads", "lead")
                        .WithMany("leadsHistories")
                        .HasForeignKey("lead_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.User", "user")
                        .WithMany("leadsHistories")
                        .HasForeignKey("updated_by")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("lead");

                    b.Navigation("user");
                });

            modelBuilder.Entity("CRMTest.Model.RolePermission", b =>
                {
                    b.HasOne("CRMTest.Model.Permissions", "permissions")
                        .WithOne("rolePermission")
                        .HasForeignKey("CRMTest.Model.RolePermission", "permission_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.UserRole", "user_role")
                        .WithOne("rolePermission")
                        .HasForeignKey("CRMTest.Model.RolePermission", "role_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("permissions");

                    b.Navigation("user_role");
                });

            modelBuilder.Entity("CRMTest.Model.Source", b =>
                {
                    b.HasOne("CRMTest.Model.Client", "client")
                        .WithMany("sources")
                        .HasForeignKey("client_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");
                });

            modelBuilder.Entity("CRMTest.Model.Tasks", b =>
                {
                    b.HasOne("CRMTest.Model.User", "staff")
                        .WithMany("tasks")
                        .HasForeignKey("created_by")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("staff");
                });

            modelBuilder.Entity("CRMTest.Model.TasksHistory", b =>
                {
                    b.HasOne("CRMTest.Model.User", "staff")
                        .WithMany()
                        .HasForeignKey("staffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.UserTask", "staffTask")
                        .WithMany("tasksHistories")
                        .HasForeignKey("stafftask_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("staff");

                    b.Navigation("staffTask");
                });

            modelBuilder.Entity("CRMTest.Model.User", b =>
                {
                    b.HasOne("CRMTest.Model.Client", "clients")
                        .WithMany("users")
                        .HasForeignKey("client_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.UserRole", "roles")
                        .WithMany("staffs")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.UserInfo", "userInfo")
                        .WithOne("user")
                        .HasForeignKey("CRMTest.Model.User", "userinfo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("clients");

                    b.Navigation("roles");

                    b.Navigation("userInfo");
                });

            modelBuilder.Entity("CRMTest.Model.UserRole", b =>
                {
                    b.HasOne("CRMTest.Model.Client", "client")
                        .WithMany("userRoles")
                        .HasForeignKey("client_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");
                });

            modelBuilder.Entity("CRMTest.Model.UserTask", b =>
                {
                    b.HasOne("CRMTest.Model.UserTaskStatus", "status")
                        .WithMany("tasks")
                        .HasForeignKey("status_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.Tasks", "tasks")
                        .WithMany("stafftask")
                        .HasForeignKey("task_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMTest.Model.User", "user")
                        .WithMany("stafftasks")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("status");

                    b.Navigation("tasks");

                    b.Navigation("user");
                });

            modelBuilder.Entity("CRMTest.Model.Campaign", b =>
                {
                    b.Navigation("clientCustomers");

                    b.Navigation("leadCampaigns");

                    b.Navigation("leads");
                });

            modelBuilder.Entity("CRMTest.Model.Client", b =>
                {
                    b.Navigation("campaigns");

                    b.Navigation("clientCustomers");

                    b.Navigation("clientFeedbacks");

                    b.Navigation("customFields");

                    b.Navigation("leadQualifications");

                    b.Navigation("leads");

                    b.Navigation("sources");

                    b.Navigation("userRoles");

                    b.Navigation("users");
                });

            modelBuilder.Entity("CRMTest.Model.ClientAccountInfo", b =>
                {
                    b.Navigation("client")
                        .IsRequired();
                });

            modelBuilder.Entity("CRMTest.Model.ClientAddressInfo", b =>
                {
                    b.Navigation("client")
                        .IsRequired();
                });

            modelBuilder.Entity("CRMTest.Model.ClientBillingInfo", b =>
                {
                    b.Navigation("client")
                        .IsRequired();
                });

            modelBuilder.Entity("CRMTest.Model.ClientSubscription", b =>
                {
                    b.Navigation("client")
                        .IsRequired();
                });

            modelBuilder.Entity("CRMTest.Model.LeadQualification", b =>
                {
                    b.Navigation("leads");
                });

            modelBuilder.Entity("CRMTest.Model.LeadStatus", b =>
                {
                    b.Navigation("leads");
                });

            modelBuilder.Entity("CRMTest.Model.Leads", b =>
                {
                    b.Navigation("leadCallHistories");

                    b.Navigation("leadDocuments");

                    b.Navigation("leadFollowUp")
                        .IsRequired();

                    b.Navigation("leadSource")
                        .IsRequired();

                    b.Navigation("lead_campaign")
                        .IsRequired();

                    b.Navigation("leadsHistories");
                });

            modelBuilder.Entity("CRMTest.Model.Permissions", b =>
                {
                    b.Navigation("rolePermission")
                        .IsRequired();
                });

            modelBuilder.Entity("CRMTest.Model.Source", b =>
                {
                    b.Navigation("campaigns");

                    b.Navigation("clientCustomers");

                    b.Navigation("leadSources");

                    b.Navigation("leads");
                });

            modelBuilder.Entity("CRMTest.Model.Subscription", b =>
                {
                    b.Navigation("clientSubscriptions");
                });

            modelBuilder.Entity("CRMTest.Model.SubscriptionStatus", b =>
                {
                    b.Navigation("clientSubscriptions");
                });

            modelBuilder.Entity("CRMTest.Model.Tasks", b =>
                {
                    b.Navigation("stafftask");
                });

            modelBuilder.Entity("CRMTest.Model.User", b =>
                {
                    b.Navigation("campaigns");

                    b.Navigation("clientCustomers");

                    b.Navigation("leadCallHistories");

                    b.Navigation("leadFollowUps");

                    b.Navigation("leads");

                    b.Navigation("leadsHistories");

                    b.Navigation("stafftasks");

                    b.Navigation("tasks");
                });

            modelBuilder.Entity("CRMTest.Model.UserInfo", b =>
                {
                    b.Navigation("user")
                        .IsRequired();
                });

            modelBuilder.Entity("CRMTest.Model.UserRole", b =>
                {
                    b.Navigation("rolePermission")
                        .IsRequired();

                    b.Navigation("staffs");
                });

            modelBuilder.Entity("CRMTest.Model.UserTask", b =>
                {
                    b.Navigation("tasksHistories");
                });

            modelBuilder.Entity("CRMTest.Model.UserTaskStatus", b =>
                {
                    b.Navigation("tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
